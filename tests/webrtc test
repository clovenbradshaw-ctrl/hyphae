<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Serverless P2P - No External Dependencies</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2em;
            margin-bottom: 10px;
        }
        
        .subtitle {
            opacity: 0.9;
            font-size: 0.95em;
        }
        
        .content {
            padding: 30px;
        }
        
        .step {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            border: 2px solid #e9ecef;
            position: relative;
        }
        
        .step.active {
            border-color: #667eea;
            background: #f3f0ff;
        }
        
        .step.completed {
            border-color: #28a745;
            background: #d4edda;
        }
        
        .step-number {
            position: absolute;
            top: -12px;
            left: 20px;
            background: #667eea;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
        
        .step.completed .step-number {
            background: #28a745;
        }
        
        .step h3 {
            margin-bottom: 15px;
            color: #495057;
            padding-top: 10px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            color: #6c757d;
            font-size: 0.9em;
            margin-bottom: 5px;
        }
        
        input, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
            font-family: inherit;
        }
        
        textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        input:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            margin-right: 10px;
            margin-top: 5px;
        }
        
        button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        button.secondary {
            background: #6c757d;
        }
        
        button.success {
            background: #28a745;
        }
        
        button.danger {
            background: #dc3545;
        }
        
        .connection-string {
            background: #f8f9fa;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            word-break: break-all;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 200px;
            overflow-y: auto;
            position: relative;
        }
        
        .connection-string.offer {
            border-color: #667eea;
            background: #f3f0ff;
        }
        
        .connection-string.answer {
            border-color: #28a745;
            background: #d4edda;
        }
        
        .copy-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #28a745;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.8em;
            display: none;
        }
        
        .copy-indicator.show {
            display: block;
            animation: fadeOut 2s forwards;
        }
        
        @keyframes fadeOut {
            0% { opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { opacity: 0; }
        }
        
        .encryption-info {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .encryption-info.single {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .status-bar {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .status-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #dc3545;
            animation: pulse 2s infinite;
        }
        
        .status-dot.connected {
            background: #28a745;
        }
        
        .status-dot.connecting {
            background: #ffc107;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .chat-container {
            background: #fff;
            border-radius: 12px;
            border: 2px solid #e9ecef;
            overflow: hidden;
            margin-top: 20px;
        }
        
        .chat-header {
            background: #f8f9fa;
            padding: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .messages {
            height: 300px;
            overflow-y: auto;
            padding: 20px;
            background: white;
        }
        
        .message {
            margin-bottom: 15px;
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        .message.own {
            text-align: right;
        }
        
        .message-content {
            display: inline-block;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 70%;
            word-wrap: break-word;
        }
        
        .message.peer .message-content {
            background: #f1f3f5;
            color: #495057;
        }
        
        .message.own .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .message.system .message-content {
            background: #fff3cd;
            color: #856404;
            font-size: 0.9em;
            border: 1px solid #ffeaa7;
        }
        
        .message.error .message-content {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .chat-input {
            display: flex;
            gap: 10px;
            padding: 15px;
            background: #f8f9fa;
            border-top: 2px solid #e9ecef;
        }
        
        .chat-input input {
            flex: 1;
        }
        
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .tab {
            padding: 10px 20px;
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        
        .tab.active {
            color: #667eea;
            border-bottom-color: #667eea;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .info-box {
            background: #e7f3ff;
            border: 2px solid #b3d7ff;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .info-box h4 {
            color: #0066cc;
            margin-bottom: 10px;
        }
        
        .info-box p {
            color: #495057;
            line-height: 1.5;
        }
        
        .password-display {
            background: #fff3cd;
            border: 2px dashed #ffc107;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            font-family: monospace;
            font-size: 1.2em;
            margin: 15px 0;
        }
        
        @media (max-width: 600px) {
            .container {
                border-radius: 0;
            }
            
            .content {
                padding: 20px;
            }
            
            .message-content {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔒 Serverless P2P Communication</h1>
            <p class="subtitle">Direct device-to-device encrypted messaging with no servers</p>
        </div>
        
        <div class="content">
            <!-- Status Bar -->
            <div class="status-bar">
                <div class="status-indicator">
                    <div class="status-dot" id="statusDot"></div>
                    <span id="statusText">Not Connected</span>
                </div>
                <div id="encryptionStatus"></div>
            </div>
            
            <!-- Tabs -->
            <div class="tabs">
                <button class="tab active" onclick="switchTab('create')">Start Connection</button>
                <button class="tab" onclick="switchTab('join')">Join Connection</button>
            </div>
            
            <!-- Create Tab -->
            <div id="createTab" class="tab-content active">
                <!-- Step 1: Setup -->
                <div class="step active" id="createStep1">
                    <div class="step-number">1</div>
                    <h3>Setup Your Connection</h3>
                    
                    <div class="form-group">
                        <label>Your Name</label>
                        <input type="text" id="creatorName" placeholder="Enter your name">
                    </div>
                    
                    <div class="form-group">
                        <label>Connection Password (Optional - enables double encryption)</label>
                        <input type="password" id="connectionPassword" placeholder="Leave empty for standard encryption">
                    </div>
                    
                    <button onclick="generateOffer()">Generate Connection Offer</button>
                    
                    <div class="info-box">
                        <h4>ℹ️ How it works:</h4>
                        <p>1. You'll generate a connection offer<br>
                        2. Send it to your peer via any method (email, text, etc.)<br>
                        3. They'll send back an answer<br>
                        4. You paste their answer to complete the connection</p>
                    </div>
                </div>
                
                <!-- Step 2: Share Offer -->
                <div class="step" id="createStep2" style="display: none;">
                    <div class="step-number">2</div>
                    <h3>Share This Connection Offer</h3>
                    
                    <p>Send this entire text to your peer through any channel:</p>
                    <div class="connection-string offer" id="offerString"></div>
                    <button onclick="copyOffer()">📋 Copy Offer</button>
                    <button onclick="downloadOffer()" class="secondary">💾 Download as File</button>
                    <span class="copy-indicator" id="offerCopyIndicator">Copied!</span>
                    
                    <div id="passwordInfo" class="password-display" style="display: none;">
                        <strong>🔐 Password Required:</strong> <span id="passwordDisplay"></span>
                        <br><small>Share this password separately for double encryption</small>
                    </div>
                </div>
                
                <!-- Step 3: Paste Answer -->
                <div class="step" id="createStep3" style="display: none;">
                    <div class="step-number">3</div>
                    <h3>Paste Their Answer</h3>
                    
                    <div class="form-group">
                        <label>Connection Answer from Peer</label>
                        <textarea id="answerInput" placeholder="Paste the answer text your peer sent you"></textarea>
                    </div>
                    
                    <button onclick="acceptAnswer()">Connect</button>
                </div>
            </div>
            
            <!-- Join Tab -->
            <div id="joinTab" class="tab-content">
                <!-- Step 1: Paste Offer -->
                <div class="step active" id="joinStep1">
                    <div class="step-number">1</div>
                    <h3>Paste Connection Offer</h3>
                    
                    <div class="form-group">
                        <label>Connection Offer from Peer</label>
                        <textarea id="offerInput" placeholder="Paste the offer text your peer sent you"></textarea>
                    </div>
                    
                    <button onclick="parseOffer()">Parse Offer</button>
                </div>
                
                <!-- Step 2: Enter Details -->
                <div class="step" id="joinStep2" style="display: none;">
                    <div class="step-number">2</div>
                    <h3>Enter Your Details</h3>
                    
                    <div class="form-group">
                        <label>Your Name</label>
                        <input type="text" id="joinerName" placeholder="Enter your name">
                    </div>
                    
                    <div id="joinPasswordSection" style="display: none;">
                        <div class="form-group">
                            <label>Connection Password (Required for this connection)</label>
                            <input type="password" id="joinPassword" placeholder="Enter the password they shared with you">
                        </div>
                    </div>
                    
                    <button onclick="generateAnswer()">Generate Answer</button>
                </div>
                
                <!-- Step 3: Share Answer -->
                <div class="step" id="joinStep3" style="display: none;">
                    <div class="step-number">3</div>
                    <h3>Share This Answer</h3>
                    
                    <p>Send this entire text back to your peer:</p>
                    <div class="connection-string answer" id="answerString"></div>
                    <button onclick="copyAnswer()">📋 Copy Answer</button>
                    <button onclick="downloadAnswer()" class="secondary">💾 Download as File</button>
                    <span class="copy-indicator" id="answerCopyIndicator">Copied!</span>
                    
                    <p style="margin-top: 15px;">✅ Waiting for connection to establish...</p>
                </div>
            </div>
            
            <!-- Chat Interface -->
            <div id="chatSection" class="chat-container" style="display: none;">
                <div class="chat-header">
                    <h3>💬 Encrypted Chat</h3>
                </div>
                <div class="messages" id="messages"></div>
                <div class="chat-input">
                    <input type="text" id="messageInput" placeholder="Type your message...">
                    <button onclick="sendMessage()">Send</button>
                    <button onclick="disconnect()" class="danger">Disconnect</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global state
        let pc = null;
        let dataChannel = null;
        let isInitiator = false;
        let localName = '';
        let remoteName = '';
        let pendingCandidates = [];
        let connectionState = 'disconnected';
        
        // Encryption state
        let baseKey = null;
        let passwordKey = null;
        let hasPassword = false;
        let connectionPassword = null;
        let salt = null;
        
        // ICE gathering state
        let gatheringComplete = false;
        let gatheringTimeout = null;
        
        // Tab switching
        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            
            if (tab === 'create') {
                document.querySelectorAll('.tab')[0].classList.add('active');
                document.getElementById('createTab').classList.add('active');
            } else {
                document.querySelectorAll('.tab')[1].classList.add('active');
                document.getElementById('joinTab').classList.add('active');
            }
        }
        
        // Encryption functions
        async function generateKey() {
            return await crypto.subtle.generateKey(
                { name: 'AES-GCM', length: 256 },
                true,
                ['encrypt', 'decrypt']
            );
        }
        
        async function deriveKeyFromPassword(password, salt) {
            const encoder = new TextEncoder();
            const keyMaterial = await crypto.subtle.importKey(
                'raw',
                encoder.encode(password),
                'PBKDF2',
                false,
                ['deriveKey']
            );
            
            return await crypto.subtle.deriveKey(
                {
                    name: 'PBKDF2',
                    salt: salt,
                    iterations: 100000,
                    hash: 'SHA-256'
                },
                keyMaterial,
                { name: 'AES-GCM', length: 256 },
                true,
                ['encrypt', 'decrypt']
            );
        }
        
        async function exportKey(key) {
            const exported = await crypto.subtle.exportKey('raw', key);
            return btoa(String.fromCharCode(...new Uint8Array(exported)));
        }
        
        async function importKey(keyString) {
            const keyData = Uint8Array.from(atob(keyString), c => c.charCodeAt(0));
            return await crypto.subtle.importKey(
                'raw',
                keyData,
                'AES-GCM',
                true,
                ['encrypt', 'decrypt']
            );
        }
        
        async function encryptData(data, key) {
            const iv = crypto.getRandomValues(new Uint8Array(12));
            const encodedData = new TextEncoder().encode(JSON.stringify(data));
            
            const encrypted = await crypto.subtle.encrypt(
                { name: 'AES-GCM', iv },
                key,
                encodedData
            );
            
            const combined = new Uint8Array(iv.length + encrypted.byteLength);
            combined.set(iv);
            combined.set(new Uint8Array(encrypted), iv.length);
            
            return btoa(String.fromCharCode(...combined));
        }
        
        async function decryptData(encryptedString, key) {
            const combined = Uint8Array.from(atob(encryptedString), c => c.charCodeAt(0));
            const iv = combined.slice(0, 12);
            const ciphertext = combined.slice(12);
            
            const decrypted = await crypto.subtle.decrypt(
                { name: 'AES-GCM', iv },
                key,
                ciphertext
            );
            
            return JSON.parse(new TextDecoder().decode(decrypted));
        }
        
        async function doubleEncrypt(data) {
            let encrypted = data;
            
            if (passwordKey) {
                encrypted = await encryptData(data, passwordKey);
                encrypted = { doubleEncrypted: true, data: encrypted };
            }
            
            if (baseKey) {
                encrypted = await encryptData(encrypted, baseKey);
            }
            
            return encrypted;
        }
        
        async function doubleDecrypt(encryptedData) {
            let decrypted = encryptedData;
            
            if (baseKey) {
                decrypted = await decryptData(encryptedData, baseKey);
                
                if (decrypted.doubleEncrypted && passwordKey) {
                    decrypted = await decryptData(decrypted.data, passwordKey);
                }
            }
            
            return decrypted;
        }
        
        // WebRTC Setup
        function createPeerConnection() {
            // Use public STUN servers only (no TURN needed for manual exchange)
            pc = new RTCPeerConnection({
                iceServers: [
                    { urls: 'stun:stun.l.google.com:19302' },
                    { urls: 'stun:stun1.l.google.com:19302' },
                    { urls: 'stun:stun2.l.google.com:19302' },
                    { urls: 'stun:stun3.l.google.com:19302' },
                    { urls: 'stun:stun4.l.google.com:19302' }
                ]
            });
            
            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    pendingCandidates.push(event.candidate);
                }
            };
            
            pc.onicegatheringstatechange = () => {
                if (pc.iceGatheringState === 'complete') {
                    gatheringComplete = true;
                    if (gatheringTimeout) {
                        clearTimeout(gatheringTimeout);
                        gatheringTimeout = null;
                    }
                }
            };
            
            pc.onconnectionstatechange = () => {
                updateConnectionStatus(pc.connectionState);
                
                if (pc.connectionState === 'connected') {
                    showChat();
                    addMessage(`✅ Connected with ${remoteName}`, 'system');
                } else if (pc.connectionState === 'failed') {
                    addMessage('❌ Connection failed', 'error');
                } else if (pc.connectionState === 'disconnected') {
                    addMessage(`👋 ${remoteName} disconnected`, 'system');
                }
            };
        }
        
        function setupDataChannel() {
            dataChannel.onopen = () => {
                console.log('Data channel opened');
            };
            
            dataChannel.onmessage = async (event) => {
                try {
                    const decrypted = await doubleDecrypt(event.data);
                    
                    if (decrypted.type === 'message') {
                        addMessage(`${remoteName}: ${decrypted.text}`, 'peer');
                    } else if (decrypted.type === 'name') {
                        remoteName = decrypted.name;
                    }
                } catch (e) {
                    addMessage('⚠️ Failed to decrypt message', 'error');
                }
            };
            
            dataChannel.onclose = () => {
                console.log('Data channel closed');
            };
        }
        
        // Step 1: Generate Offer (Initiator)
        async function generateOffer() {
            const name = document.getElementById('creatorName').value.trim();
            if (!name) {
                alert('Please enter your name');
                return;
            }
            
            localName = name;
            isInitiator = true;
            
            // Generate encryption keys
            baseKey = await generateKey();
            
            const password = document.getElementById('connectionPassword').value;
            if (password) {
                hasPassword = true;
                connectionPassword = password;
                salt = crypto.getRandomValues(new Uint8Array(16));
                passwordKey = await deriveKeyFromPassword(password, salt);
                
                document.getElementById('passwordInfo').style.display = 'block';
                document.getElementById('passwordDisplay').textContent = password;
            }
            
            // Create peer connection and data channel
            createPeerConnection();
            dataChannel = pc.createDataChannel('encrypted-channel');
            setupDataChannel();
            
            // Create offer
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            
            // Wait for ICE gathering with timeout
            await waitForIceGathering();
            
            // Create offer package
            const offerPackage = {
                type: 'offer',
                offer: pc.localDescription,
                candidates: pendingCandidates,
                name: localName,
                key: await exportKey(baseKey),
                hasPassword: hasPassword,
                salt: hasPassword ? btoa(String.fromCharCode(...salt)) : null
            };
            
            // Display offer
            const offerString = btoa(JSON.stringify(offerPackage));
            document.getElementById('offerString').textContent = offerString;
            
            // Update UI
            document.getElementById('createStep1').classList.remove('active');
            document.getElementById('createStep1').classList.add('completed');
            document.getElementById('createStep2').style.display = 'block';
            document.getElementById('createStep2').classList.add('active');
            document.getElementById('createStep3').style.display = 'block';
            
            updateConnectionStatus('waiting');
        }
        
        // Step 2: Parse Offer (Joiner)
        async function parseOffer() {
            const offerInput = document.getElementById('offerInput').value.trim();
            if (!offerInput) {
                alert('Please paste the offer');
                return;
            }
            
            try {
                const offerPackage = JSON.parse(atob(offerInput));
                
                // Import encryption key
                baseKey = await importKey(offerPackage.key);
                hasPassword = offerPackage.hasPassword;
                remoteName = offerPackage.name;
                
                if (hasPassword) {
                    salt = Uint8Array.from(atob(offerPackage.salt), c => c.charCodeAt(0));
                    document.getElementById('joinPasswordSection').style.display = 'block';
                }
                
                // Store for later use
                window.offerPackage = offerPackage;
                
                // Update UI
                document.getElementById('joinStep1').classList.remove('active');
                document.getElementById('joinStep1').classList.add('completed');
                document.getElementById('joinStep2').style.display = 'block';
                document.getElementById('joinStep2').classList.add('active');
                
            } catch (e) {
                alert('Invalid offer. Please check and try again.');
            }
        }
        
        // Step 3: Generate Answer (Joiner)
        async function generateAnswer() {
            const name = document.getElementById('joinerName').value.trim();
            if (!name) {
                alert('Please enter your name');
                return;
            }
            
            localName = name;
            isInitiator = false;
            
            // Handle password if required
            if (hasPassword) {
                const password = document.getElementById('joinPassword').value;
                if (!password) {
                    alert('This connection requires a password');
                    return;
                }
                
                try {
                    passwordKey = await deriveKeyFromPassword(password, salt);
                    // Test encryption
                    await encryptData({test: true}, passwordKey);
                } catch (e) {
                    alert('Invalid password');
                    return;
                }
            }
            
            // Create peer connection
            createPeerConnection();
            
            pc.ondatachannel = (event) => {
                dataChannel = event.channel;
                setupDataChannel();
            };
            
            // Set remote description and add ICE candidates
            await pc.setRemoteDescription(window.offerPackage.offer);
            
            for (const candidate of window.offerPackage.candidates) {
                await pc.addIceCandidate(new RTCIceCandidate(candidate));
            }
            
            // Create answer
            const answer = await pc.createAnswer();
            await pc.setLocalDescription(answer);
            
            // Wait for ICE gathering
            await waitForIceGathering();
            
            // Create answer package
            const answerPackage = {
                type: 'answer',
                answer: pc.localDescription,
                candidates: pendingCandidates,
                name: localName
            };
            
            // Display answer
            const answerString = btoa(JSON.stringify(answerPackage));
            document.getElementById('answerString').textContent = answerString;
            
            // Update UI
            document.getElementById('joinStep2').classList.remove('active');
            document.getElementById('joinStep2').classList.add('completed');
            document.getElementById('joinStep3').style.display = 'block';
            document.getElementById('joinStep3').classList.add('active');
            
            updateConnectionStatus('connecting');
        }
        
        // Step 4: Accept Answer (Initiator)
        async function acceptAnswer() {
            const answerInput = document.getElementById('answerInput').value.trim();
            if (!answerInput) {
                alert('Please paste the answer');
                return;
            }
            
            try {
                const answerPackage = JSON.parse(atob(answerInput));
                
                remoteName = answerPackage.name;
                
                // Set remote description
                await pc.setRemoteDescription(answerPackage.answer);
                
                // Add ICE candidates
                for (const candidate of answerPackage.candidates) {
                    await pc.addIceCandidate(new RTCIceCandidate(candidate));
                }
                
                // Update UI
                document.getElementById('createStep3').classList.remove('active');
                document.getElementById('createStep3').classList.add('completed');
                
                updateConnectionStatus('connecting');
                
            } catch (e) {
                alert('Invalid answer. Please check and try again.');
            }
        }
        
        // Wait for ICE gathering
        function waitForIceGathering() {
            return new Promise((resolve) => {
                if (gatheringComplete) {
                    resolve();
                } else {
                    gatheringTimeout = setTimeout(resolve, 3000); // 3 second timeout
                }
            });
        }
        
        // UI Functions
        function updateConnectionStatus(status) {
            connectionState = status;
            const statusDot = document.getElementById('statusDot');
            const statusText = document.getElementById('statusText');
            
            statusDot.className = 'status-dot';
            
            switch(status) {
                case 'connected':
                    statusDot.classList.add('connected');
                    statusText.textContent = `Connected to ${remoteName}`;
                    updateEncryptionStatus();
                    break;
                case 'connecting':
                    statusDot.classList.add('connecting');
                    statusText.textContent = 'Connecting...';
                    break;
                case 'waiting':
                    statusDot.classList.add('connecting');
                    statusText.textContent = 'Waiting for peer...';
                    break;
                default:
                    statusText.textContent = 'Not Connected';
            }
        }
        
        function updateEncryptionStatus() {
            const encStatus = document.getElementById('encryptionStatus');
            if (hasPassword) {
                encStatus.innerHTML = '<span style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.85em;">🔐🔐 Double Encrypted</span>';
            } else {
                encStatus.innerHTML = '<span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.85em;">🔐 Encrypted</span>';
            }
        }
        
        function showChat() {
            document.getElementById('chatSection').style.display = 'block';
            document.getElementById('messageInput').focus();
        }
        
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const text = input.value.trim();
            if (!text || !dataChannel || dataChannel.readyState !== 'open') return;
            
            addMessage(`You: ${text}`, 'own');
            
            const encrypted = await doubleEncrypt({
                type: 'message',
                text: text
            });
            
            dataChannel.send(encrypted);
            input.value = '';
        }
        
        function addMessage(text, type = 'peer') {
            const messagesEl = document.getElementById('messages');
            const messageEl = document.createElement('div');
            messageEl.className = `message ${type}`;
            messageEl.innerHTML = `<div class="message-content">${text}</div>`;
            messagesEl.appendChild(messageEl);
            messagesEl.scrollTop = messagesEl.scrollHeight;
        }
        
        function disconnect() {
            if (dataChannel) dataChannel.close();
            if (pc) pc.close();
            location.reload();
        }
        
        // Copy functions
        function copyOffer() {
            copyToClipboard(document.getElementById('offerString').textContent, 'offerCopyIndicator');
        }
        
        function copyAnswer() {
            copyToClipboard(document.getElementById('answerString').textContent, 'answerCopyIndicator');
        }
        
        function copyToClipboard(text, indicatorId) {
            navigator.clipboard.writeText(text).then(() => {
                const indicator = document.getElementById(indicatorId);
                indicator.classList.add('show');
                setTimeout(() => indicator.classList.remove('show'), 2000);
            });
        }
        
        // Download functions
        function downloadOffer() {
            const text = document.getElementById('offerString').textContent;
            downloadAsFile(text, 'connection-offer.txt');
        }
        
        function downloadAnswer() {
            const text = document.getElementById('answerString').textContent;
            downloadAsFile(text, 'connection-answer.txt');
        }
        
        function downloadAsFile(content, filename) {
            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }
        
        // Enter key to send message
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });
    </script>
</body>
</html>
